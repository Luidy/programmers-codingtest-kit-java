import java.util.*;

class Solution {
    boolean[] visited;
    HashSet<Integer> primes;
    public int solution(String numbers) {
        visited = new boolean[numbers.length()];
        primes = new HashSet<Integer>();
        
        dfs(0, "", numbers);
        return primes.size();
    }
    
    void dfs(int index, String current, String numbers){
        if(current != ""){
            int c = Integer.valueOf(current);
            if(isPrime(c)){
                primes.add(c);
            }
        }
        
        if(index==numbers.length()){
            return;
        }
        
        for(int i=0; i<numbers.length(); i++){
            if(visited[i]){
                continue;
            }
            
            visited[i]=true;
            dfs(index+1, current+numbers.charAt(i), numbers);        
            visited[i]=false;
        }
    }
    
    boolean isPrime(int a){
        if(a<2) return false;
        for(int i=2; i*i<=a; i++){
            if(a%i == 0){
                return false;
            }
        }
        
        return true;
    }
}